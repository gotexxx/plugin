export default class AppClientService {
    constructor(name) {
        this.name = name;
    }
    get(url, options = {}) {
        options.method = 'GET';
        return this.request(url, options);
    }
    post(url, options = {}) {
        options.method = 'POST';
        return this.request(url, options);
    }
    patch(url, options = {}) {
        options.method = 'PATCH';
        return this.request(url, options);
    }
    delete(url, options = {}) {
        options.method = 'DELETE';
        return this.request(url, options);
    }
    /**
     * Resets the token for the current app. This will force the next request to fetch a new token.
     */
    reset() {
        window.sessionStorage.removeItem(this.getStorageKey());
    }
    getStorageKey() {
        return `app-system.${this.name}`;
    }
    async getHeaders() {
        const key = this.getStorageKey();
        if (!window.sessionStorage.getItem(key)) {
            const data = await this.fetchHeaders();
            window.sessionStorage.setItem(key, JSON.stringify(data));
            return data.headers;
        }
        const data = JSON.parse(window.sessionStorage.getItem(key));
        if (new Date(data.expires) < new Date()) {
            window.sessionStorage.removeItem(key);
            return await this.getHeaders();
        }
        return data.headers;
    }
    async fetchHeaders() {
        const url = window['router']['frontend.app-system.generate-token'].replace('Placeholder', encodeURIComponent(this.name));
        const response = await fetch(url, {
            method: 'POST',
        });
        if (!response.ok) {
            throw new Error(`Error while fetching token, got status code: ${response.status} with response ${await response.text()}`);
        }
        const data = await response.json();
        return {
            headers: {
                'shopware-app-token': data.token,
                'shopware-app-shop-id': data.shopId,
            },
            expires: data.expires,
        };
    }
    async request(url, options) {
        if (!options.headers) {
            options.headers = {};
        }
        options.headers = { ...options.headers, ...await this.getHeaders() };
        return fetch(url, options);
    }
}
