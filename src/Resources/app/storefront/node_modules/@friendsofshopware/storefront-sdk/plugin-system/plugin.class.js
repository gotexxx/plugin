import NativeEventEmitter from "./NativeEventEmitter";
import deepmerge from "deepmerge";
export default class PluginClass {
    constructor(el, options = {}, pluginName = false) {
        this.initialOptions = {};
        this.options = {};
        this.el = el;
        this.$emitter = new NativeEventEmitter(this.el);
        this._pluginName = this._getPluginName(pluginName);
        this._initialized = true;
        this.initialOptions = options;
        this._registerInstance();
    }
    setup() {
        this.options = this._mergeOptions(this.initialOptions);
        this.init();
    }
    _update() {
        if (!this._initialized)
            return;
        this.update();
    }
    update() { }
    _registerInstance() {
        const elementPluginInstances = window.PluginManager.getPluginInstancesFromElement(this.el);
        elementPluginInstances.set(this._pluginName, this);
        const plugin = window.PluginManager.getPlugin(this._pluginName, false);
        if (plugin.has('instances')) {
            const instances = plugin.get('instances');
            instances.push(this);
        }
    }
    _getPluginName(pluginName) {
        if (pluginName === false) {
            // @ts-ignore
            return this.constructor.name;
        }
        return pluginName;
    }
    _mergeOptions(options) {
        const dashedPluginName = this._pluginName.replace(/([A-Z])/g, '-$1').replace(/^-/, '').toLowerCase();
        const dataAttributeConfig = this.parseJsonOrFail(dashedPluginName);
        let dataAttributeOptions = '';
        if (typeof this.el.getAttribute === 'function') {
            dataAttributeOptions = this.el.getAttribute("data-".concat(dashedPluginName, "-options")) || '';
        }
        // static plugin options
        // previously merged options
        // explicit options when creating a plugin instance with 'new'
        const merge = [
            // @ts-ignore
            this.constructor.options,
            this.options,
            options,
        ];
        // options which are set via data-plugin-name-config="config name"
        if (dataAttributeConfig)
            merge.push(window.PluginConfigManager.get(this._pluginName, dataAttributeConfig));
        // options which are set via data-plugin-name-options="{json..}"
        try {
            if (dataAttributeOptions)
                merge.push(JSON.parse(dataAttributeOptions));
        }
        catch (e) {
            throw new Error(`The data attribute "data-${dashedPluginName}-options" could not be parsed to json: ${e.message || ''}`);
        }
        return deepmerge.all(merge.filter(config => {
            return config instanceof Object && !(config instanceof Array);
        })
            .map(config => config || {}));
    }
    parseJsonOrFail(dashedPluginName) {
        if (typeof this.el.getAttribute !== 'function') {
            return '';
        }
        const value = this.el.getAttribute(`data-${dashedPluginName}-config`) || '';
        try {
            return JSON.parse(value);
        }
        catch (e) {
            return value;
        }
    }
}
